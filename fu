#!/bin/env lua
-- vim: set ts=4 sw=4 foldmethod=marker :

--[[====================================================================
Fedora Updater (fu): lightweight Fedora « distribution »

Copyright (C) 2018-2020 Christophe Delord
https://github.com/CDSoft/fu

This file is part of Fedora Updater (FU)

FU is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

FU is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with FU.  If not, see <http://www.gnu.org/licenses/>.
====================================================================--]]

function help()
    printI [[
usage: %(basename(arg[0])) options

    %(basename(arg[0])) installs and configures some softwares I use on
    Linux at home and at work:
    - zsh, fzf, some plugins
    - neovim and some plugins
    - i3 and some personal tools
    - programming languages (Haskell, OCaml, Rust, Julia, Zig, ...)
    - pandoc, LaTeX, ...
    - zoom
    - and much more (Use the source, Luke!)

options:
    -h          help
    -f          force update
    -u          upgrade packages
    -r          reset

hooks:
    ~/.zuser    additional definitions loaded at the end of .zshrc
]]
    os.exit()
end

-- Utilities {{{

function I(s)
    return (s:gsub("%%(%b())", function(x)
        return (assert(load("return "..x)))()
    end))
end

function dirname(s)
    return (s:gsub("[^/]*$", ""))
end

function basename(s)
    return (s:gsub(".*/([^/]*)$", "%1"))
end

-- }}}

HOME = os.getenv "HOME"
USER = os.getenv "USER"

fu_path = I"%(HOME)/.config/fu"
config_path = I"%(fu_path)/config"
repo_path = I"%(fu_path)/repos"

TIMEZONE = "Europe/Paris"
KEYMAP = "fr"
LOCALE = "fr_FR.UTF-8"

BROWSER = "firefox"
BROWSER2 = "google-chrome"

LATEST_LTS = "lts-16.20"

RACKET_VERSION = "7.9"
RACKET_NAME = I"racket-%(RACKET_VERSION)"
RACKETINST = I"https://mirror.racket-lang.org/installers/%(RACKET_VERSION)/racket-%(RACKET_VERSION)-x86_64-linux.sh"

JULIA_VERSION = "1.5.2"
JULIA_NAME = I"julia-%(JULIA_VERSION)"
JULIA_ARCHIVE = I"https://julialang-s3.julialang.org/bin/linux/x64/%(JULIA_VERSION:gsub('%.%d*$', ''))/%(JULIA_NAME)-linux-x86_64.tar.gz"

ZIG_VERSION = "0.7.0+73f3f0167"
ZIG_ARCHIVE = I"zig-linux-x86_64-%(ZIG_VERSION).tar.xz"
ZIG_URL = I"https://ziglang.org/builds/%(ZIG_ARCHIVE)"
ZIG_DIR = I"%(ZIG_ARCHIVE:gsub('%.tar%.xz$', ''))"

DROPBOXINSTALL = 'https://www.dropbox.com/download?plat=lnx.x86_64'

function main()
    title "Fedora Updater"

    for _, a in ipairs(arg) do
        if a == "-h" then help() end
        if a == "-f" then force = true; upgrade = true end
        if a == "-u" then upgrade = true end
        if a == "-r" then reset() end
    end

    identification()

    -- Step 0: essential packages used by this script
    install_essential_packages()

    install_packages()

    -- Step 1: other packages
    system_configuration()
    shell_configuration()
    network_configuration()
    if cfg_yesno("dropbox", "Install dropbox?") then dropbox_configuration() end
    filesystem_configuration()
    dev_configuration()
    if cfg_yesno("haskell", "Install Haskell?") then haskell_configuration() end
    if cfg_yesno("ocaml", "Install OCaml?") then ocaml_configuration() end
    if cfg_yesno("racket", "Install Racket?") then racket_configuration() end
    if cfg_yesno("rust", "Install Rust?") then rust_configuration() end
    if cfg_yesno("julia", "Install Julia?") then julia_configuration() end
    if cfg_yesno("zig", "Install Zig?") then zig_configuration() end
    text_edition_configuration()
    pandoc_configuration()
    if cfg_yesno("latex", "Install LaTeX?") then latex_configuration() end
    if cfg_yesno("mdbook", "Install MDBook?") then mdbook_configuration() end
    if cfg_yesno("sphinx", "Install Sphinx?") then sphinx_configuration() end
    neovim_configuration()
    i3_configuration()
    graphic_application_configuration()
    if cfg_yesno("povray", "Install Povray?") then povray_configuration() end
    internet_configuration()
    if cfg_yesno("zoom", "Install Zoom?") then zoom_configuration() end
    if cfg_yesno("virtualization", "Install virtualization tools?") then virtualization_configuration() end
    if cfg_yesno("work", "Install work configuration?") then work_configuration() end

    install_packages()
    upgrade_packages()
end

-- Configuration {{{

function reset()
    sh "rm -rf %(config_path)"
end

function cfg_yesno(param, question)
    local answer = nil
    local config_file = config_path.."/"..param
    if not file_exist(config_file) then
        repeat
            io.write(question.." [y/n] ")
            answer = io.read("l"):lower():gsub("^%s*(%S).*$", "%1")
        until answer:match("[yn]")
        mkdir(config_path)
        write(config_file, answer)
    end
    answer = read(config_file):lower():gsub("^%s*(%S).*$", "%1")
    return answer:match "y"
end

function cfg_string(param, question)
    local answer = nil
    local config_file = config_path.."/"..param
    if not file_exist(config_file) then
        repeat
            io.write(question.." ")
            answer = io.read("l"):gsub("^%s+", ""):gsub("%s+$", "")
        until #answer > 0
        mkdir(config_path)
        write(config_file, answer)
    end
    answer = read(config_file):gsub("^%s+", ""):gsub("%s+$", "")
    return answer
end

-- }}}

-- Utilities {{{

function set()
    local set = {}
    local ordered = {}
    local self = {}
    function self.len() return #ordered end
    function self.add(item)
        item:gsub("%S+", function(name)
            if set[name] == nil then
                set[name] = true
                table.insert(ordered, name)
            end
        end)
    end
    function self.ipairs() return ipairs(ordered) end
    function self.concat(sep) return table.concat(ordered, sep) end
    return self
end

function printI(s)
    print(I(s))
end

function title(s)
    local cols = pipe "tput cols"
    local color = string.char(27).."[44m"
    local normal = string.char(27).."[0m"
    s = I(s)
    io.write(string.char(27).."]0;fu: "..s..string.char(7)) -- windows title
    s = s .. string.rep(" ", cols - #s - 4)
    io.write(color.."### "..s..normal.."\n")
end

function log(s)
    local color = string.char(27).."[44m"
    local normal = string.char(27).."[0m"
    s = I(s)
    io.write(color.."### "..s.." "..normal.."\n")
end

function file_exist(path)
    local f = io.open(path, "r")
    if f then
        f:close()
        return true
    else
        return false
    end
end

function dir_exist(path)
    return file_exist(path)
end

function read(path)
    local f = assert(io.open(path, "r"))
    local content = f:read("a")
    f:close()
    return content
end

function write(path, content)
    local f = assert(io.open(path, "w"))
    f:write(content)
    f:close()
end

function rootfile(path, content)
    with_tmpfile(function(tmp)
        write(tmp, content)
        sh("sudo cp "..tmp.." "..path)
        sh("sudo chmod 644 "..path)
        sh("sudo chown root:root "..path)
    end)
end

function pipe(cmd, stdin)
    local mode = stdin and "w" or "r"
    local f = io.popen(cmd, mode)
    if stdin then
        f:write(stdin)
        f:close()
    else
        local result = f:read("a"):gsub("^%s+", ""):gsub("%s+$", "")
        f:close()
        return result
    end
end

function with_tmpfile(f)
    local tmp = os.tmpname()
    f(tmp)
    os.remove(tmp)
end

function with_tmpdir(f)
    local tmp = os.tmpname()
    os.remove(tmp)
    sh("mkdir "..tmp)
    f(tmp)
    sh("rm -rf "..tmp)
end

function sh(cmd) assert(os.execute(I(cmd))) end

function mkdir(path) sh("mkdir -p "..path) end

function rm(path) os.remove(path) end

function identification()
    MYHOSTNAME = cfg_string("hostname", "Hostname:")
    RELEASE = pipe "rpm -E %fedora"
    log "release : Fedora %(RELEASE)"
    log "hostname: %(MYHOSTNAME)"
end

repos = set()
coprs = set()
packages = set()

function install_packages()
    if repos.len() > 0 or coprs.len() > 0 then upgrade = true end

    if force or upgrade then
        title "Install packages"
        for _, repo in repos.ipairs() do sh("sudo dnf install -y \""..repo.."\"") end
        for _, copr in coprs.ipairs() do sh("sudo dnf copr enable \""..copr.."\"") end
        if packages.len() > 0 then
            sh("sudo dnf install "..packages.concat(" ").." --skip-broken --best --allowerasing")
        end
    end

    repos = set()
    coprs = set()
    packages = set()
end

function upgrade_packages()
    if force or upgrade then
        title "Upgrade packages"
        sh "sudo dnf upgrade --best --allowerasing"
    end
end

function installed(cmd)
    local found = (os.execute("hash "..cmd.." 2>/dev/null"))
    return found
end

function script(name)
    local function template(file_name, dest_name, exe)
        if file_exist(file_name) then
            log("Create "..dest_name)
            mkdir(dirname(dest_name))
            write(dest_name, I(read(file_name)))
            if exe then sh("chmod +x "..dest_name) end
            return true
        end
    end
    local files = dirname(pipe(I"realpath %(arg[0])")).."/files"
    if template(files.."/"..name, HOME.."/"..name) then return end
    if template(files.."/.local/bin/"..name, HOME.."/.local/bin/"..name, true) then return end
    error("Template not found: "..name)
end

function gitclone(url)
    local name = basename(url)
    mkdir(repo_path)
    local path = repo_path.."/"..name:gsub("%.git$", "")
    if dir_exist(path) then
        if force or upgrade then
            log("Upgrade "..url.." to "..path)
            sh("cd "..path.." && git pull")
        end
    else
        log("Clone "..url.." to "..path)
        sh("git clone "..url.." "..path)
    end
end

-- }}}

-- Essential packages {{{

function install_essential_packages()
    log "Check essential packages"
    if not installed("git") then packages.add "git"; upgrade = true end
    if not installed("pip") then packages.add "python-pip"; upgrade = true end
    if not installed("autoconf") then packages.add "autoconf"; upgrade = true end
    if not installed("automake") then packages.add "automake"; upgrade = true end

    mkdir "%(HOME)/.local/bin"
    mkdir "%(HOME)/.local/opt"
    mkdir "%(config_path)"
    mkdir "%(repo_path)"
end

-- }}}

-- System packages {{{

function system_configuration()
    title "System configuration"

    if not file_exist("/etc/yum.repos.d/rpmfusion-free.repo") then repos.add(I"https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-%(RELEASE).noarch.rpm") end
    if not file_exist("/etc/yum.repos.d/rpmfusion-nonfree.repo") then repos.add(I"http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-%(RELEASE).noarch.rpm") end

    packages.add [[
        dnf-plugins-core dnfdragora
        fedora-workstation-repositories
    ]]

    -- Locale and timezone
    sh "sudo timedatectl set-timezone %(TIMEZONE)"
    sh "sudo localectl set-keymap %(KEYMAP)"
    sh "sudo localectl set-locale %(LOCALE)"

    -- No more poweroff
    sh "sudo sed -i 's/.*HandlePowerKey.*/HandlePowerKey=ignore/' /etc/systemd/logind.conf"

    -- crontab
    pipe("crontab -", I[[
0 * * * * %(HOME)/.local/bin/wallpaper
]])
end

-- }}}

-- Shell configuration {{{

function shell_configuration()
    title "Shell configuration"

    packages.add [[
        zsh
        powerline-fonts
        grc bat fzf
        PackageKit-command-not-found
        util-linux-user
        inotify-tools
        htop
        pwgen
        ripgrep
        exa
        fd-find
        tmux
    ]]

    sh(I"chsh -s /bin/zsh %(USER)")

    script ".zprofile"
    script ".zshrc"

    script ".config/starship.toml"

    gitclone "https://github.com/ohmyzsh/ohmyzsh.git" -- not installed, some scripts will be sourced
    gitclone "https://github.com/zsh-users/zsh-syntax-highlighting.git"
    gitclone "https://github.com/zsh-users/zsh-autosuggestions"
    if force or upgrade or not file_exist(I"%(HOME)/.local/bin/starship") then
        with_tmpfile(function(tmp)
            sh("curl -fsSL https://starship.rs/install.sh -o "..tmp.." && bash "..tmp.." -f -b ~/.local/bin")
        end)
    end

    script "vi"

    gitclone "https://github.com/junegunn/fzf.git"
    sh "cd %(repo_path)/fzf && ./install --key-bindings --completion --no-update-rc"

    script ".tmux/conf"

end

-- }}}

-- Network configuration {{{

function network_configuration()
    title "Network configuration"

    packages.add [[
        nmon
        openssh openssh-server
        nmap
        blueman
        network-manager-applet NetworkManager-tui
        socat
        sshpass
        minicom
        wireshark
        tigervnc
        can-utils
        openvpn
    ]]

    -- hostname
    sh "sudo hostname %(MYHOSTNAME)"
    rootfile("/etc/hostname", I"%(MYHOSTNAME)\n")

    -- ssh
    sh "sudo systemctl start sshd"
    sh "sudo systemctl enable sshd"
    sh "sudo systemctl disable firewalld" -- firewalld fails to stop during shutdown.
    script "ssha"

    -- sshd
    sh "sudo chkconfig sshd on"
    sh "sudo service sshd start"

    -- wireshark
    sh "sudo usermod -a -G wireshark %(USER)"

end

-- }}}

-- Dropbox configuration {{{

function dropbox_configuration()

    packages.add [[ PyQt4 libatomic ]]

    if force or not file_exist(I"%(HOME)/.dropbox-dist/dropboxd") then
        title "Dropbox configuration"
        sh "rm -rf ~/.dropbox-dist"
        sh("cd ~ && wget -O - %(DROPBOXINSTALL) | tar xzf -")
    end

end

-- }}}

-- Filesystem configuration {{{

function filesystem_configuration()
    title "Filesystem configuration"

    packages.add [[
        gparted
        udftools
        encfs
        p7zip p7zip-gui p7zip-plugins
        mc pcmanfm
        dolphin
        krusader kdiff3 krename
        pmount
        exfat-utils fuse-exfat
        syslinux
        backintime-common backintime-qt4
        cryptsetup
        squashfs-tools squashfuse
        baobab ncdu qdirstat
        xz unrar
    ]]

end

-- }}}

-- Development environment configuration {{{

function dev_configuration()
    title "Development environment configuration"

    if cfg_yesno("R", "Install R?") then packages.add [[ R ]] end

    packages.add [[
        git git-gui gitk qgit gitg tig git-lfs
        subversion
        clang llvm clang-tools-extra
        cppcheck
        cmake
        ncurses-devel
        readline-devel
        meld
        pl pl-xpce
        libev-devel startup-notification-devel xcb-util-devel xcb-util-cursor-devel xcb-util-keysyms-devel xcb-proto xcb-util-wm-devel xcb-util-xrm-devel libxkbcommon-devel libxkbcommon-x11-devel yajl-devel
        arm-none-eabi-gcc arm-none-eabi-gcc-cs-c++ arm-none-eabi-gdb
        mingw64-gcc
        gcc-gnat
        python-pip
        pypy
        lua lua-filesystem lua-fun lua-lpeg lua-posix lua-socket luajit
        lua-devel
        glfw
        flex bison
        perl-ExtUtils-MakeMaker
        SDL2-devel SDL2_ttf-devel SDL2_gfx-devel
        libpcap-devel
        libyaml libyaml-devel
        libubsan libubsan-static libasan libasan-static libtsan libtsan-static
        expect
        python3-devel
        python3-PyYAML python3-termcolor
        wine
        pkgconfig
        boost boost-devel
        libjpeg-turbo-devel libpng-devel libtiff-devel
        npm
        liblzma-devel
        protobuf-devel python3-protobuf
        lzma-devel xz-devel zlib-devel
        blas-devel lapack-devel
        gnuplot
        openssl-devel
        tokei
    ]]

    -- pip
    if force or upgrade then sh "python -m pip install --user --upgrade pip" end

    -- git
    -- https://stackoverflow.com/questions/34119866/setting-up-and-using-meld-as-your-git-difftool-and-mergetool
    -- use git meld to call git difftool with meld
    sh "git config --global alias.meld '!git difftool -t meld --dir-diff'"
    sh "git config --global core.excludesfile ~/.gitignore"

    -- PMcCabe
    if force or upgrade or not installed "pmccabe" then
        gitclone "https://github.com/datacom-teracom/pmccabe"
        sh "cd %(repo_path)/pmccabe && make && cp pmccabe ~/.local/bin"
    end
end

-- }}}

-- Haskell configuration {{{

function haskell_configuration()
    title "Haskell configuration"

    if cfg_yesno("haskell-platform", "Install haskell-platform?") then packages.add [[ haskell-platform ]] end

    if not installed "stack" then
        sh "curl -sSL https://get.haskellstack.org/ | sh"
    elseif force or upgrade then
        sh "stack upgrade"
    end

    local RESOLVER = LATEST_LTS
    local HASKELL_PACKAGES = {
        "hlint",
        "hoogle",
        "matplotlib",
        "gnuplot",
    }
    if force or upgrade then
        for _, package in ipairs(HASKELL_PACKAGES) do
            sh("stack install --resolver="..RESOLVER.." "..package)
        end
    end

    -- hCalc
    if force or upgrade or not installed "hcalc" then
        gitclone "http://github.com/cdsoft/hcalc"
        sh "cd %(repo_path)/hcalc && make install"
    end

end

-- }}}

-- OCaml configuration {{{

function ocaml_configuration()

    packages.add [[
        z3
        cvc4
    ]]

    if force or not installed "opam" then
        title "OCaml configuration"
        sh "wget https://raw.github.com/ocaml/opam/master/shell/opam_installer.sh -O - | sh -s /usr/local/bin"
        sh "opam update && opam upgrade"
        sh "opam install depext"
        sh "opam depext frama-c || true"
        sh "opam install frama-c coq why3 alt-ergo"
    end

end

-- }}}

-- Racket configuration {{{

function racket_configuration()

    if force or not installed "racket" then
        title "Racket configuration"
        sh "wget %(RACKETINST) -c -O ~/.local/opt/%(basename(RACKETINST))"
        sh "sh ~/.local/opt/%(basename(RACKETINST)) --in-place --dest ~/.local/opt/%(RACKET_NAME)"
    end

end

-- }}}

-- Rust configuration {{{

function rust_configuration()

    if not installed "rustc" then
        title "Rust configuration"
        with_tmpfile(function(tmp)
            sh("curl https://sh.rustup.rs -sSf -o "..tmp.." && sh "..tmp.." -y -v --no-modify-path")
        end)
        sh "rustup update stable"
    elseif force or upgrade then
        title "Rust configuration"
        sh "rustup update stable"
    end

end

-- }}}

-- Julia configuration {{{

function julia_configuration()

    if force or not installed "julia" then
        title "Julia configuration"

        sh "wget %(JULIA_ARCHIVE) -c -O ~/.local/opt/%(basename(JULIA_ARCHIVE))"
        sh "rm -rf ~/.local/opt/%(JULIA_NAME)"
        sh "tar xzf ~/.local/opt/%(basename(JULIA_ARCHIVE)) -C ~/.local/opt"
        sh "ln -f -s ~/.local/opt/%(JULIA_NAME)/bin/julia ~/.local/bin/julia"
    end

end

-- }}}

-- Zig configuration {{{

function zig_configuration()

    if force or not installed "zig" then
        title "Zig configuration"

        sh "wget %(ZIG_URL) -c -O ~/.local/opt/%(basename(ZIG_URL))"
        sh "rm -rf ~/.local/opt/%(ZIG_DIR)"
        sh "tar xJf ~/.local/opt/%(basename(ZIG_URL)) -C ~/.local/opt"
        sh "ln -f -s ~/.local/opt/%(ZIG_DIR)/zig ~/.local/bin/zig"
    end

end

-- }}}

-- Text edition configuration {{{

function text_edition_configuration()
    title "Text edition configuration"

    packages.add [[
        wkhtmltopdf
        aspell-fr aspell-en
        figlet
        translate-shell
        doxygen
        gnuplot
        graphviz plantuml
    ]]

end

-- }}}

-- Pandoc configuration {{{

function pandoc_configuration()
    title "Pandoc configuration"

    packages.add [[
        pandoc
    ]]

    -- TODO: modifier l'installation de abp quand il sera écrit en Lua
    if cfg_yesno("haskell", "Install Haskell?") then
        if force or upgrade or not installed "abp" then
            gitclone "http://github.com/cdsoft/abp"
            sh "cd %(repo_path)/abp && stack install"
        end
    end

    if cfg_yesno("haskell", "Install Haskell?") and cfg_yesno("pp", "Install pp?") then
        if force or upgrade or not installed "pp" then
            gitclone "http://github.com/cdsoft/pp"
            sh "cd %(repo_path)/pp && make install"
        end
    end

    if force or not file_exist(I"%(HOME)/.local/bin/plantuml.jar") then
        sh "wget http://sourceforge.net/projects/plantuml/files/plantuml.jar -O ~/.local/bin/plantuml.jar"
    end

    if force or not file_exist(I"%(HOME)/.local/bin/ditaa.jar") then
        sh "wget https://github.com/stathissideris/ditaa/releases/download/v0.11.0/ditaa-0.11.0-standalone.jar -O ~/.local/bin/ditaa.jar"
    end

    if force or upgrade or not installed "blockdiag" then
        sh "pip3 install --user blockdiag seqdiag actdiag nwdiag"
    end

    if force or upgrade or not file_exist(I"%(HOME)/.local/opt/mermaid/node_modules/.bin/mmdc") then
        mkdir "%(HOME)/.local/opt/mermaid"
        sh "cd ~/.local/opt/mermaid && npm install mermaid.cli && ln -s -f $PWD/node_modules/.bin/mmdc ~/.local/bin/"
    end

end

-- }}}

-- LaTeX configuration {{{

function latex_configuration()
    title "LaTeX configuration"

    packages.add [[
        texlive texlive-scheme-full
        graphviz plantuml asymptote
    ]]

end

-- }}}

-- MDBook configuration {{{

function mdbook_configuration()
    title "MDBook configuration"

    local MDBOOK_PACKAGES = {
        "mdbook",
        "mdbook-toc",
        "mdbook-latex",
        "mdbook-plantuml",
        "mdbook-mermaid",
        "mdbook-checklist",
        "mdbook-presentation-preprocessor",
    }
    for _, package in ipairs(MDBOOK_PACKAGES) do
        if force or not installed(package) then
            sh("cargo install %(force and '--force' or '') "..package)
        end
    end
end

-- }}}

-- Sphinx configuration {{{

function sphinx_configuration()

    if force or upgrade or not installed "sphinx-build" then
        title "Sphinx configuration"
        sh "pip3 install --user sphinx==2.4.4 sphinxcontrib-plantuml breathe recommonmark sphinx-rtd-theme pyaml"
        sh "pip3 install --user scipy matplotlib"
    end

end

-- }}}

-- neovim configuration {{{

function neovim_configuration()
    title "neovim configuration"

    packages.add [[
        neovim
        fzf
        ccrypt pwgen
        gzip
    ]]

    script ".config/nvim/init.vim"

    -- vim-plug
    gitclone "https://github.com/junegunn/vim-plug.git"
    mkdir "%(HOME)/.config/nvim/autoload"
    sh "cp %(repo_path)/vim-plug/plug.vim %(HOME)/.config/nvim/autoload/"

    -- Asymptote syntax
    if file_exist "/usr/share/asymptote/asy.vim" and file_exist "/usr/share/asymptote/asy_filetype.vim" then
        mkdir "%(HOME)/.config/nvim/syntax"
        mkdir "%(HOME)/.config/nvim/ftdetect"
        sh "cp /usr/share/asymptote/asy.vim ~/.config/nvim/syntax/"
        sh "cp /usr/share/asymptote/asy_filetype.vim ~/.config/nvim/ftdetect/asy.vim"
    end

    -- update all plugins
    if force or upgrade then
        sh "nvim -c PlugInstall -c qa"
    end

    if cfg_yesno("haskell", "Install Haskell?") then
        if force or upgrade or not installed "shellcheck" then
            sh "stack install --resolver=lts-14.27 ShellCheck"
        end
    end

end

-- }}}

-- i3 configuration {{{

function i3_configuration()
    title "i3 configuration"

    packages.add [[
        rxvt-unicode-256color-ml
        konsole
        numlockx
        rlwrap
        i3 i3status i3lock dmenu xbacklight feh
        i3-ipc
        arandr
        sox
        fortune-mod ImageMagick
        beesu
        st sxiv
        volumeicon pavucontrol
    ]]

    -- Default programs
    sh "xdg-mime default okularApplication_pdf.desktop application/pdf"
    sh "xdg-mime default org.kde.gwenview.desktop image/jpg"
    sh "xdg-mime default org.kde.gwenview.desktop image/jpeg"
    sh "xdg-mime default org.kde.gwenview.desktop image/png"
    sh "xdg-mime default vlc.desktop video/mp4"
    sh "xdg-mime default vlc.desktop video/webm"
    sh "xdg-mime default vlc.desktop video/ogg"
    sh "xdg-mime default vlc.desktop video/mpeg"
    sh "xdg-mime default vlc.desktop video/mpg"
    sh "xdg-mime default vlc.desktop video/x-matroska"
    sh "xdg-mime default vlc.desktop audio/mpeg"
    sh "xdg-mime default vlc.desktop audio/x-vorbis+ogg"
    sh "xdg-mime default vlc.desktop audio/x-opus+ogg"
    sh "xdg-mime default vlc.desktop audio/mp3"
    sh "xdg-mime default vlc.desktop audio/ogg"
    sh "xdg-mime default vlc.desktop audio/opus"
    sh "xdg-mime default vlc.desktop audio/x-mod"
    sh "xdg-mime default vlc.desktop audio/x-xm"
    sh "xdg-mime default vlc.desktop audio/x-it"

    script ".config/konsolerc"
    script ".local/share/konsole/CDSoft.profile"

    script ".config/i3/config"

    script "xi3"

    if force or upgrade or not installed "xcwd" then
        gitclone "https://github.com/schischi-a/xcwd.git"
        sh "cd %(repo_path)/xcwd && make && sudo make install"
    end

    pipe("base64 -d > ~/.config/i3/empty.wav", "UklGRiQAAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQAAAAA=")

    script ".config/i3/status"
    sh "sudo setcap cap_net_admin=ep %(pipe 'which i3status')"

    script "wallpaper"
    script "lock"

    script "screenshot"

    script "menu"

    script "brightness"

    if cfg_yesno("haskell", "Install Haskell?") then
        if force or upgrade or not installed "tt" then
            gitclone "http://github.com/CDSoft/tt"
            sh "cd %(repo_path)/tt && make"
        end
    end

end

-- }}}

-- Graphic applications configuration {{{

function graphic_application_configuration()
    title "Graphic applications configuration"

    packages.add [[
        shutter feh gimp ImageMagick scribus inkscape
        krita gwenview
        qt5-qtx11extras
        gnuplot
        qrencode
        libreoffice libreoffice-langpack-fr libreoffice-help-fr
        vokoscreenNG
        simple-scan
        evince okular mupdf qpdfview

        vlc ffmpeg
        gstreamer1-plugins-base gstreamer1-plugins-good gstreamer1-plugins-ugly gstreamer1-plugins-bad-free gstreamer1-plugins-bad-free gstreamer1-plugins-bad-freeworld gstreamer1-plugins-bad-free-extras
    ]]

end

-- }}}

-- Povray configuration {{{

function povray_configuration()
    title "Povray configuration"

    if force or not installed "povray" then
        gitclone "https://github.com/pov-ray/povray.git"
        sh "cd %(repo_path)/povray/unix && ./prebuild.sh"
        sh [[cd %(repo_path)/povray/ && ./configure --prefix="$(realpath ~/.local)" compiled_by="christophe delord <http://cdelord.fr>"]]
        sh "cd %(repo_path)/povray/ && make check install"
    end
end

-- }}}

-- Internet configuration {{{

function internet_configuration()
    title "Internet configuration"

    sh "sudo dnf config-manager --set-enabled google-chrome"

    packages.add [[
        firefox
        google-chrome-stable
        surf
        thunderbird
    ]]

    -- Default browser
    sh "BROWSER= xdg-settings set default-web-browser %(BROWSER).desktop"
    sh "BROWSER= xdg-mime default %(BROWSER).desktop text/html"
    sh "BROWSER= xdg-mime default %(BROWSER).desktop x-scheme-handler/http"
    sh "BROWSER= xdg-mime default %(BROWSER).desktop x-scheme-handler/https"
    sh "BROWSER= xdg-mime default %(BROWSER).desktop x-scheme-handler/about"

    -- Thunderbird extensions
    if force or update or not file_exist(I"%(repo_path)/reply_as_original_recipient.xpi") then
        gitclone "https://github.com/qiqitori/reply_as_original_recipient.git"
        sh "cd %(repo_path)/reply_as_original_recipient && zip -r ../reply_as_original_recipient.xpi *"
    end

    -- Remove unecessary language symlinks
    sh "sudo find /usr/share/myspell -type l -exec rm -v {} \\;"

end

-- }}}

-- Zoom configuration {{{

function zoom_configuration()
    title "Zoom configuration"

    if force or not installed "zoom" then
        with_tmpdir(function(tmp)
            sh("wget https://zoom.us/client/latest/zoom_x86_64.rpm -O "..tmp.."/zoom_x86_64.rpm")
            sh("sudo dnf install "..tmp.."/zoom_x86_64.rpm")
        end)
    end

end

-- }}}

-- Virtualization configuration {{{

function virtualization_configuration()
    title "Virtualization configuration"

    packages.add [[
        VirtualBox
        virtualbox-guest-additions
    ]]
    packages.add(I"akmod-VirtualBox kernel-devel-%(pipe 'uname -r')")

end

-- }}}

-- Work configuration {{{

function work_configuration()
    title "Work configuration"

    if not file_exist "/etc/yum.repos.d/_copr:copr.fedorainfracloud.org:thofmann:ros.repo" then coprs.add("thofmann/ros") end

    packages.add [[
        moby-engine grubby
        python-devel python3-devel
        ros-rosbag
        xterm
        minicom
        patch yices z3 cvc4 zenon eqp E gtksourceview2-devel libgnomecanvas-devel gmp
        xorg-x11-server-Xephyr
        sqlite-devel fuse-devel libcurl-devel zlib-devel m4
    ]]

    -- AWS
    if force or upgrade then
        sh "pip3 install --user awscli boto3"
        sh "sudo groupadd docker || true"
        sh "sudo usermod -a -G docker %(USER)"
        sh "sudo systemctl enable docker"
    end
    script "aws-login"

    -- Frama-C
    if force or upgrade then
        sh "why3 config --detect"
        --sh "pip2 install --user json-query"
    end

    -- Docker
    if force or upgrade then
        -- https://github.com/docker/cli/issues/2104
        sh "sudo grubby --update-kernel=ALL --args=\"systemd.unified_cgroup_hierarchy=0\""

        sh "sudo systemctl start docker || true"
        sh "sudo usermod -a -G docker %(USER)"
    end

    if cfg_yesno("move-docker-to-home", "Move /var/lib/docker to /home/docker?") then
        if not dir_exist "/home/docker" then
            sh "sudo service docker stop"
            sh "sudo rm -rf /home/docker"
            sh "sudo mv /var/lib/docker /home/docker"
            sh "sudo ln -s /home/docker /var/lib/docker"
            sh "sudo service docker start || true"
        end
    end

    if installed "opam" then
        if force or upgrade or not installed "google-drive-ocamlfuse" then
            sh "opam install google-drive-ocamlfuse"
        end
    end

end

-- }}}

main()

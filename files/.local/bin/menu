#!/bin/bash

_menu()
{
    local action=$(cat <<EndOfMenu | rofi -dmenu -i -l 30 -p "$(hostname) âžœ"
suspend             : lock screen & suspend to memory
suspend when idle   : lock screen & suspend to memory when the OS is idle
hibernate           : suspend to disk
power-off           : switch the computer off
reboot              : reboot the computer
exit                : exit i3
lock                : lock screen

single              : internal monitor only
right               : external monitor on the right
left                : external monitor on the left
above               : external monitor on the top
clone               : clone the internal monitor to the external one

mute                : mute the main audio output
unmute              : unmute the main audio output
mixer               : audio mixer

nm                  : network manager
bt                  : bluetooth manager

renws               : rename the active workspace
newws               : create a new workspace
EndOfMenu
)
    test -n "$action" && $0 "$action"
}

# monitor management {{{

move_to_int()
{
    i3-msg "[class=\".*\"] move workspace to output xinerama-0"
}

rename_workspace()
{
    PREFIX=$( i3-msg -t get_workspaces |
              jq '.[] | select(.focused==true).name' |
              tr -d "\"" |
              awk -F: '$1 ~ /[0-9]+/ {print $1": "}'
            )

    i3-input -F "rename workspace to \"${PREFIX}%s\"" -P 'New name of the current workspace: '

    CLEAN_NAME=$( i3-msg -t get_workspaces |
                  jq '.[] | select(.focused==true).name' |
                  tr -d "\"" |
                  awk -F: '$1 ~ /[0-9]+/ && $2 ~ /^ *$/ {print $1}'
                )

    test -n "$CLEAN_NAME" && i3-msg "rename workspace to \"${CLEAN_NAME}\""
}

new_workspace()
{
    i3-input -F "workspace \"%s\"" -P 'New workspace: '
}

# }}}

# connection / power management {{{

cat <<\EndOfIdleScript > /tmp/idle
#!/bin/bash

period=10
confirm=6
low=0
netthr=1500
cputhr=30

net0=$(awk '{split($0, n, " "); for (i=1; i<=NF; i++) s+=n[i]} END {print s}' /proc/net/netstat)
while [ $low -lt $confirm ]
do
    net=$(awk '{split($0, n, " "); for (i=1; i<=NF; i++) s+=n[i]} END {print s}' /proc/net/netstat)
    dnet=$(( (net-net0) / period ))
    net0=$net
    cpu=$(awk '{print $2*100}' /proc/loadavg)
    clear
    cat <<.
Waiting for low CPU and network activity
========================================

$(date)

CPU load: $cpu
Network : $dnet/s

Type Ctrl-C to cancel.
.

    if [ $dnet -lt $netthr ] && [ $cpu -lt $cputhr ]
    then
        low=$((low+1))
    else
        low=0
    fi
    sleep $period
done
EndOfIdleScript
chmod +x /tmp/idle

idle()
{
    urxvt -T "Waiting for low CPU and network activity" -e bash -c "/tmp/idle && $1"
}

fix_r8169()
{
    case $(hostname) in
        useless_now_desktop) urxvt -T "Reconnection" -e sh -c "figlet 'Reconnection...'; sudo rmmod r8169; sudo modprobe r8169";;
    esac
}

# }}}

EXT_RES=1920x1200

case "$1" in
    single*)        move_to_int; xrandr --output HDMI-1 --off
                    i3-msg reload
                    ;;
    clone*)         move_to_int; xrandr --output HDMI-1 --auto --same-as eDP-1 --scale-from 1920x1080
                    i3-msg reload
                    ;;
    left*)          xrandr --output HDMI-1 --mode $EXT_RES --left-of eDP-1
                    i3-msg move workspace to output left
                    i3-msg reload
                    ;;
    dual*|right*)   xrandr --output HDMI-1 --mode $EXT_RES --right-of eDP-1
                    i3-msg move workspace to output right
                    i3-msg reload
                    ;;
    above*)         xrandr --output HDMI-1 --mode $EXT_RES --above eDP-1
                    i3-msg move workspace to output up
                    i3-msg reload
                    ;;

    mute*)          pactl set-sink-mute `LANG=C pactl list short sinks | cut -f2` true ;;
    unmute*)        pactl set-sink-mute `LANG=C pactl list short sinks | cut -f2` false ;;
    mixer*)         pavucontrol ;;

    nm*)            nm-connection-editor ;;
    bt*)            blueman-manager ;;

    renws*)         rename_workspace ;;
    newws*)         new_workspace ;;

    "lock"*)                lock ;;
    "suspend when idle"*)   idle "lock && systemctl suspend" && fix_r8169 ;;
    "suspend"*)             lock && systemctl suspend && fix_r8169 ;;
    "hibernate"*)           lock && systemctl hybrid-sleep && fix_r8169 ;;
    "power-off"*)           systemctl poweroff ;;
    "reboot"*)              systemctl reboot ;;
    "exit"*)                i3-msg exit ;;

    "") _menu ;;
esac
